name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  RUST_VERSION: '1.70'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test:all

      - name: Security audit
        run: npm run security:audit

      - name: Performance benchmark
        run: npm run benchmark

  build-production:
    name: Build Production Assets
    runs-on: ubuntu-latest
    needs: [validate-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true

      - name: Install dependencies
        run: npm ci

      - name: Build Rust components (optimized)
        working-directory: ./native
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Build TypeScript (production)
        run: npm run build:prod

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r dist deployment-package/
          cp -r native/target/release deployment-package/
          cp package.json deployment-package/
          cp package-lock.json deployment-package/
          tar -czf opensafe-deployment.tar.gz deployment-package/

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: production-build
          path: opensafe-deployment.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-production]
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: production-build

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/opensafe/staging
            sudo systemctl stop opensafe-staging
            wget ${{ secrets.ARTIFACT_URL }}/opensafe-deployment.tar.gz
            tar -xzf opensafe-deployment.tar.gz
            npm ci --production
            sudo systemctl start opensafe-staging
            
      - name: Health check staging
        run: |
          sleep 30
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1

      - name: Run staging smoke tests
        run: |
          curl -f ${{ secrets.STAGING_URL }}/api/v1/health
          curl -f ${{ secrets.STAGING_URL }}/metrics

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production, deploy-staging]
    if: github.event_name == 'release' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: production-build

      - name: Create database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            pg_dump ${{ secrets.DATABASE_URL }} > /opt/backups/opensafe-backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to production (Blue-Green)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Determine current and new deployment slots
            if [ -f /opt/opensafe/current_slot ]; then
              CURRENT_SLOT=$(cat /opt/opensafe/current_slot)
            else
              CURRENT_SLOT="blue"
            fi
            
            if [ "$CURRENT_SLOT" = "blue" ]; then
              NEW_SLOT="green"
            else
              NEW_SLOT="blue"
            fi
            
            echo "Deploying to $NEW_SLOT slot"
            
            # Deploy to new slot
            cd /opt/opensafe/$NEW_SLOT
            wget ${{ secrets.ARTIFACT_URL }}/opensafe-deployment.tar.gz
            tar -xzf opensafe-deployment.tar.gz
            npm ci --production
            
            # Run database migrations
            npm run migrate:prod
            
            # Start new slot
            sudo systemctl start opensafe-$NEW_SLOT
            sleep 30
            
            # Health check new slot
            curl -f http://localhost:8081/health || exit 1
            
            # Switch traffic to new slot
            sudo nginx -s reload
            
            # Stop old slot
            sudo systemctl stop opensafe-$CURRENT_SLOT
            
            # Update current slot marker
            echo $NEW_SLOT > /opt/opensafe/current_slot

      - name: Health check production
        run: |
          sleep 60
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health || exit 1

      - name: Run production smoke tests
        run: |
          # Test critical endpoints
          curl -f ${{ secrets.PRODUCTION_URL }}/metrics
          
          # Test safety analysis endpoint (with auth)
          curl -f -H "Authorization: Bearer ${{ secrets.API_TEST_TOKEN }}" \
               -H "Content-Type: application/json" \
               -d '{"text":"Hello world","mode":"fast"}' \
               ${{ secrets.PRODUCTION_URL }}/api/v1/safety/analyze

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'release'
    needs: [deploy-production]
    environment: production
    steps:
      - name: Rollback to previous version
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Get current slot
            CURRENT_SLOT=$(cat /opt/opensafe/current_slot)
            
            # Determine previous slot
            if [ "$CURRENT_SLOT" = "blue" ]; then
              PREVIOUS_SLOT="green"
            else
              PREVIOUS_SLOT="blue"
            fi
            
            echo "Rolling back from $CURRENT_SLOT to $PREVIOUS_SLOT"
            
            # Start previous slot
            sudo systemctl start opensafe-$PREVIOUS_SLOT
            sleep 30
            
            # Switch traffic back
            sudo nginx -s reload
            
            # Stop failed deployment
            sudo systemctl stop opensafe-$CURRENT_SLOT
            
            # Update slot marker
            echo $PREVIOUS_SLOT > /opt/opensafe/current_slot

      - name: Restore database backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            LATEST_BACKUP=$(ls -t /opt/backups/opensafe-backup-*.sql | head -n1)
            psql ${{ secrets.DATABASE_URL }} < $LATEST_BACKUP

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            OpenVault Production Deployment Successful!
            Version: ${{ github.event.release.tag_name }}
            Environment: Production
            Deploy Time: $(date)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: needs.deploy-production.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            OpenVault Production Deployment Failed!
            Version: ${{ github.event.release.tag_name }}
            Environment: Production
            Rollback: Initiated
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update release status
        if: github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ needs.deploy-production.result }}' === 'success' ? 'Deployed' : 'Failed';
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ github.event.release.id }},
              body: context.payload.release.body + `\n\n**Deployment Status:** ${status} to Production`
            });

  performance-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.deploy-production.result == 'success'
    steps:
      - name: Monitor performance metrics
        run: |
          echo "Monitoring production metrics for 5 minutes..."
          for i in {1..10}; do
            RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" ${{ secrets.PRODUCTION_URL }}/health)
            echo "Health check response time: ${RESPONSE_TIME}s"
            if (( $(echo "$RESPONSE_TIME > 1.0" | bc -l) )); then
              echo "WARNING: Response time elevated"
            fi
            sleep 30
          done

      - name: Check error rates
        run: |
          # Query monitoring system for error rates
          ERROR_RATE=$(curl -s "${{ secrets.MONITORING_URL }}/api/v1/query?query=rate(http_requests_total{status=~'5..'}[5m])" | jq '.data.result[0].value[1]' | tr -d '"')
          if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
            echo "WARNING: Error rate elevated: $ERROR_RATE"
            exit 1
          fi
          echo "Error rate normal: $ERROR_RATE" 